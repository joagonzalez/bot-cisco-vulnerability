#!/usr/bin/env python
from ansible.module_utils.basic import *
from netmiko import ConnectHandler

def main():
    module = AnsibleModule(
        argument_spec=dict(
            device_type=dict(required=False, default='cisco_ios'),
            host=dict(required=True),
            port=dict(required=False, default=22, type='int'),
            username=dict(required=True),
            password=dict(required=True, no_log=True),
            secret=dict(required=False, default='', no_log=True),
            enable_mode=dict(required=False, default=False, type='bool'),
            check_string=dict(required=False, default='#'),
            command=dict(required=True)
        ),
        supports_check_mode=False)

    net_device = {
        'device_type': module.params['device_type'],
        'ip': module.params['host'],
        'port': int(module.params['port']),
        'username': module.params['username'],
        'password': module.params['password'],
        'secret': module.params['secret'],
        'verbose': False,
    }

    # Connect to device
    try:
        ssh_conn = ConnectHandler(**net_device)
    except (NetmikoAuthenticationException):
        module.fail_json(msg="Error: Authentication")
    except (NetmikoTimeoutException):
        module.fail_json(msg="Error: timeout")
    except (SSHException):
        module.fail_json(msg="Error: SSH not enabled")
    except Exception as e:
        module.fail_json(msg="Error: Uncategorized (Connection)", output=e)
    
    # Verify if enable is required
    if module.params['enable_mode']:
        try:
            ssh_conn.enable()
        except Exception as e:
            module.fail_json(msg="Error: Uncategorized (Enable)", output=e)

    # Find desired prompt
    output = ssh_conn.find_prompt()

    if module.params['check_string'] not in output:
        module.fail_json(msg="Error: check_string not found", output=output)

    # Get command info
    try:
        output = ssh_conn.send_command(module.params['command'])
    except Exception as e:
        module.fail_json(msg="Error: Uncategorized (Command)", output=e)

    # Success
    try:
        module.exit_json(msg="SSH connection completed successfully", output=output, output_lines=output.split('\n'))
    except Exception as e:
        module.fail_json(msg="Error: Uncategorized (Exit)", output=e)

if __name__ == "__main__":
    main()
import sys
import json
import requests
sys.path.append('../')
from config.settings import config
from services.loggerService import loggerService

# disable warning fot not verified ssl
requests.packages.urllib3.disable_warnings()

class CiscoVulnApi:
    token = None

    def __init__(self):
        self.api = config['api']['url']
        self.key = config['api']['key']
        self.secret = config['api']['secret']
        self.token = self.get_token()

    def get_token(self):
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        login_info = {
                'client_id': self.key,
                'client_secret': self.secret,
                'grant_type': 'client_credentials'
        }

        if self.token == None:
            try:
                response = requests.post(config['api']['oauth'], data=login_info, headers=headers)
                loggerService.info(response)
                if response.status_code == 200 and 'access_token' in response.json():
                    loggerService.info('Token success!')
                    loggerService.info('Token:' + str(response.json()['access_token']))
                    return response.json()['access_token']
            except Exception as e:
                loggerService.error('Error getting token')
            return None

    def all(self):
        if self.token != None:
            headers = {
                'Accept': 'application/json',
                'Authorization': 'Bearer ' +    self.token  
            }
            try:
                response = requests.get(self.api+'/all', headers=headers, verify=False)
                if response.status_code == 200:
                    data = [response.json()]
                else:
                    return response.status_code
            except Exception as e:
                loggerService.error('Error trying to get data: ' + str(e))
                data = str(e)
            return data    
        else:
            loggerService.error('No valid token available for query') 

if __name__ == '__main__':
    openVulApi = CiscoVulnApi()
    loggerService.info(openVulApi.all())
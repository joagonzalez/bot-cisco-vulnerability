import sys
import json
import requests
sys.path.append('../')
from config.settings import config
from services.loggerService import loggerService
from services.token import tokenService

# disable warning fot not verified ssl
requests.packages.urllib3.disable_warnings()

class CiscoVulnApi:

    def __init__(self):
        self.api = config['api']['url']
        
    def request(self, endpoint, params=''):
        '''
        Make generic http request
        '''
        headers = {
            'Accept': 'application/json',
            'Authorization': 'Bearer ' + tokenService.get_token() 
        }
        try:
            loggerService.info(self.api+'/'+endpoint+params)
            response = requests.get(self.api+'/'+endpoint+params, headers=headers, verify=False)
            if response.status_code == 200:
                data = [response.json()]
            else:
                loggerService.error('Error: ' + str(response.json()))
                return response.status_code
        except Exception as e:
            loggerService.error('Error trying to get data: ' + str(e))
            data = str(e)
        return data    


    def all(self):
        '''
        Gets all information available from Cisco Vuln API
        '''
        return self.request('all')
  

    def os(self, os, version):
        '''
        Endpoint that allows to filter by ios family version
        '''
        return self.request(os, '?version='+str(version))

    def latest(self, latest):
        '''
        Latest information from API
        '''
        return self.request('/latest/', params=str(latest))

    def save_to_file(self, filename, data):
        '''
        Function that allows to generate a dump information
        with endpoints data
        '''
        try:
            f = open(filename, 'w')
            for line in data:
                f.write(str(line))
            f.close()
        except Exception as e:
            loggerService.error(f"Error trying to create the file {filename}")
            loggerService.error("Error: " + str(e))

    def show_advisories(self, advisories):
        '''
        Creates a clean output of advisories JSON data structure
        '''
        for advisorie in advisories['advisories']:
            print('------------------------------------')
            for key, value in advisorie.items():
                if key != 'productNames':
                    loggerService.info(key + ': ' + str(value[0:100]))
        print('------------------------------------')
        loggerService.info(f"This version has a total of {len(advisories['advisories'])} advisories...")

    def show_os_advisories(self, os, version):
        '''
        Shows in a pretty way advisories from ios images
        '''
        try:
            data = self.os(os, version)            
            self.show_advisories(data[0])
        except Exception as e:
            loggerService.error(data)

    def show_bot_advisories(self, os, version):
        '''
        Shows in a pretty way advisories from ios images
        for bot service
        '''
        try:
            data = self.os(os, version)
            i = 0
            result = '<b>Total vulnerabilities: </b>' + str(len(data[0]['advisories'])) + '\n'
            result += '-------------------- \n' 
            for advisorie in data[0]['advisories']:
                for key, value in advisorie.items():
                    if key == 'advisoryTitle' and i <= 5:
                        result += '<b>' + key + ': </b>' + value + '\n'
                        if 'sir' in advisorie:
                            result += '<b>Severity: </b>' + advisorie['sir'] + '\n'
                        if 'publicationUrl' in advisorie:
                            result += '<b>Publication Url: </b><a href="' + advisorie['publicationUrl'][8:] + '">click</a>\n'
                        if 'lastUpdated' in advisorie:
                            result += '<b>Updated: </b>' + advisorie['lastUpdated'] + '\n'
                        result += '-------------------- \n' 
                i+=1 
            return result
        except Exception as e:
            loggerService.error(data)
            return 'Empty advisory list'

if __name__ == '__main__':

    openVulApi = CiscoVulnApi()
    # loggerService.info(openVulApi.all())
    # data = openVulApi.os('ios','15.1(4)M12a')
    # openVulApi.show_advisories(data[0])
    # openVulApi.save_to_file('test', data)
    # loggerService.info(openVulApi.latest(1))
    openVulApi.show_os_advisories('ios','15.2(4)S4a')
    openVulApi.show_os_advisories('ios','15.1(4)M12a')
    openVulApi.show_os_advisories('iosxe','16.8.1')
    openVulApi.show_os_advisories('nxos','9.2(1)')
    openVulApi.show_os_advisories('aci', '11.0(2j)')
    print(openVulApi.show_bot_advisories('aci', '11.0(2j)'))
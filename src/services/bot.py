"""
Simple Bot that interact with Cisco OpenVulnApi
"""

import sys
sys.path.append('../')
from config.settings import config
from services.ciscoApi import loggerService
from services.ciscoApi import CiscoVulnApi
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

QUERY = range(1)
openVulApi = CiscoVulnApi()

def start(update: Update, context: CallbackContext) -> int:
    loggerService.info('New conversation')
    update.message.reply_text(
        'Hi! My name cisco_vulnerability Bot. I will hold a conversation with you. '
        'Send /cancel to stop talking to me.\n\n'
    )

    return QUERY


def query(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    parameters = update.message.text.split(' ')
    loggerService.info("Query from " + str(user.first_name) + " " + str(update.message.text))
    loggerService.info("Message: " + str(parameters))
    result = openVulApi.show_bot_advisories(parameters[0], parameters[1])
    loggerService.info(result)
    update.message.reply_text(result, 
        parse_mode=ParseMode.HTML, 
        disable_web_page_preview=config['telegram']['disableWebPreview']
        )

    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    loggerService.info("User " + str(user.first_name) + " canceled the conversation.")
    update.message.reply_text(
        'Bye! I hope we can talk again some day.', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater(config['telegram']['token'], use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUERY: [MessageHandler(Filters.text & ~Filters.command, query)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()